@model QLDiemRenLuyen.Models.ViewModels.StudentFeedback.StudentFeedbackVm
@using System
@using System.Globalization
@using System.Linq
@{
    Layout = "~/Views/Shared/_LayoutStudent.cshtml";
    ViewData["Title"] = "Phản hồi điểm rèn luyện";
    var vi = new CultureInfo("vi-VN");

    string StatusBadge(string? status)
    {
        return (status ?? string.Empty).ToUpperInvariant() switch
        {
            "DRAFT" => "badge status-draft",
            "SUBMITTED" => "badge status-submitted",
            "RESPONDED" => "badge status-responded",
            "CLOSED" => "badge status-closed",
            _ => "badge bg-secondary"
        };
    }

    string StatusLabel(string? status)
    {
        return (status ?? string.Empty).ToUpperInvariant() switch
        {
            "DRAFT" => "Nháp",
            "SUBMITTED" => "Đã gửi",
            "RESPONDED" => "Đã phản hồi",
            "CLOSED" => "Đã đóng",
            _ => status ?? string.Empty
        };
    }
}

<div id="student-feedback-page" class="container-fluid py-3">
    <div class="d-flex flex-column flex-md-row align-items-md-center justify-content-between gap-3 mb-3">
        <div>
            <h2 class="mb-0">Phản hồi điểm rèn luyện</h2>
            <p class="text-muted mb-0">Gửi thắc mắc và theo dõi phản hồi từ khoa.</p>
        </div>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-primary" id="btnCreateFeedback">
                <i class="fa-solid fa-plus me-1"></i>Gửi phản hồi mới
            </button>
        </div>
    </div>

    <div id="toastArea" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1080"></div>

    <form method="get" class="row g-2 align-items-end mb-4" id="feedbackFilterForm">
        <div class="col-lg-3 col-md-4">
            <label for="termId" class="form-label">Học kỳ</label>
            <select id="termId" name="termId" class="form-select">
                <option value="">-- Tất cả --</option>
                @foreach (var term in Model.Terms)
                {
                    var isSelected = !string.IsNullOrEmpty(Model.SelectedTermId) && string.Equals(Model.SelectedTermId, term.Id, StringComparison.OrdinalIgnoreCase);
                    <option value="@term.Id" selected="@(isSelected ? "selected" : null)">@term.Name</option>
                }
            </select>
        </div>
        <div class="col-lg-5 col-md-8">
            <label for="q" class="form-label">Tìm kiếm</label>
            <input id="q" name="q" value="@(Model.Keyword ?? string.Empty)" class="form-control" placeholder="Nhập tiêu đề phản hồi" />
        </div>
        <div class="col-lg-2 col-md-4">
            <label for="pageSize" class="form-label">Số bản ghi</label>
            <select id="pageSize" name="pageSize" class="form-select">
                @foreach (var size in new[] { 10, 20, 30 })
                {
                    <option value="@size" selected="@(Model.Items?.PageSize == size)">@size</option>
                }
            </select>
        </div>
        <div class="col-lg-2 col-md-4 d-grid">
            <button type="submit" class="btn btn-outline-primary"><i class="fa-solid fa-filter me-1"></i>Lọc</button>
        </div>
    </form>

    @Html.AntiForgeryToken()

    @if (Model.Items == null || Model.Items.Data == null || !Model.Items.Data.Any())
    {
        <div class="alert alert-info"><i class="fa-solid fa-circle-info me-2"></i>Chưa có phản hồi nào.</div>
    }
    else
    {
        <div class="table-responsive shadow-sm">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-light">
                    <tr>
                        <th scope="col">Tiêu đề</th>
                        <th scope="col">Học kỳ</th>
                        <th scope="col">Ngày gửi</th>
                        <th scope="col">Trạng thái</th>
                        <th scope="col" class="text-end">Hành động</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Items.Data)
                    {
                        <tr data-feedback-id="@item.Id" data-status="@item.Status">
                            <td class="fw-semibold">
                                <span class="text-truncate d-inline-block" title="@item.Title">@item.Title</span>
                            </td>
                            <td>@item.TermName</td>
                            <td>@item.CreatedAt.ToString("dd/MM/yyyy HH:mm", vi)</td>
                            <td>
                                <span class="@StatusBadge(item.Status)">@StatusLabel(item.Status)</span>
                            </td>
                            <td class="text-end">
                                <div class="btn-group btn-group-sm" role="group">
                                    <button type="button" class="btn btn-outline-secondary btn-feedback-detail" data-id="@item.Id">
                                        <i class="fa-solid fa-eye"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-primary btn-feedback-edit @(string.Equals(item.Status, "DRAFT", StringComparison.OrdinalIgnoreCase) ? string.Empty : "d-none")" data-id="@item.Id">
                                        <i class="fa-solid fa-pen"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-danger btn-feedback-delete @(string.Equals(item.Status, "DRAFT", StringComparison.OrdinalIgnoreCase) ? string.Empty : "d-none")" data-id="@item.Id">
                                        <i class="fa-solid fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        if (Model.Items.TotalPages > 1)
        {
            var page = Model.Items.Page;
            var totalPages = Model.Items.TotalPages;
            string PageUrl(int p) => Url.Action("Index", new
            {
                page = p,
                pageSize = Model.Items.PageSize,
                termId = Model.SelectedTermId,
                q = Model.Keyword
            }) ?? $"?page={p}";

            <nav class="mt-3" aria-label="Phân trang phản hồi">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(page <= 1 ? "disabled" : string.Empty)">
                        <a class="page-link" href="@PageUrl(Math.Max(1, page - 1))" aria-label="Trang trước">&laquo;</a>
                    </li>
                    @for (var p = 1; p <= totalPages; p++)
                    {
                        <li class="page-item @(p == page ? "active" : string.Empty)"><a class="page-link" href="@PageUrl(p)">@p</a></li>
                    }
                    <li class="page-item @(page >= totalPages ? "disabled" : string.Empty)">
                        <a class="page-link" href="@PageUrl(Math.Min(totalPages, page + 1))" aria-label="Trang sau">&raquo;</a>
                    </li>
                </ul>
            </nav>
        }
    }
</div>

<div id="feedbackModalContainer"></div>
<div id="feedbackDetailContainer"></div>

@section Styles {
    <link rel="stylesheet" href="~/css/student-feedback.css" asp-append-version="true" />
}

@section Scripts {
    <script src="~/js/student.feedback.js" asp-append-version="true"></script>
}